# ************************************************************************* #
# This file is part of Shard.                                               #
#                                                                           #
# Shard is free software: you can redistribute it and/or modify             #
# it under the terms of the GNU Affero General Public License as            #
# published by the Free Software Foundation.                                #
#                                                                           #
# This program is distributed in the hope that it will be useful,           #
# but WITHOUT ANY WARRANTY; without even the implied warranty of            #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              #
# GNU Affero General Public License for more details.                       #
#                                                                           #
# You should have received a copy of the GNU Affero General Public License  #
# along with this program. If not, see <http://www.gnu.org/licenses/>.      #
# ************************************************************************* #

includes:
  - shard-lex.yaml

nodes:
  # Integer literal
  INT_LITERAL:
    - NUMBER_LITERAL

  # Constant literals
  LITERAL:
    - INT_LITERAL

  # Subexpression surrounded by parenthesis.
  PAREN_EXPRESSION:
    - [ "(", EXPRESSION, ")" ]

  # Unary expressions
  UNARY_EXPRESSION:
    - EXPRESSION
    - [ OPERATOR, EXPRESSION ]
    - [ EXPRESSION, OPERATOR ]

  # Expression operator
  OPERATOR:
    - OTHER
    - [ OPERATOR, OTHER ]

  # <expression> <operator> <expression>
  BINARY_EXPRESSION:
    - [ EXPRESSION, OPERATOR, EXPRESSION ]

  # <expression> "(" [ <argument_list> ] ")"
  # fn()
  # fn(1, 2)
  CALL_EXPRESSION:
    - [ EXPRESSION, "(", ")" ]
    - [ EXPRESSION, "(", ARGUMENT_LIST, ")" ]

  # x = 10
  # x, y
  # x, y, z / 2 + 10
  ARGUMENT_LIST:
    - EXPRESSION
    - [ EXPRESSION, ",", ARGUMENT_LIST ]

  # <expression> "[" <argument_list> "]"
  # fn[1, 2]
  SUBSCRIPT_EXPRESSION:
    - [ EXPRESSION, "[", ARGUMENT_LIST, "]" ]

  # Base expression.
  EXPRESSION:
    - IDENTIFIER
    - LITERAL
    - PAREN_EXPRESSION
    - UNARY_EXPRESSION
    - BINARY_EXPRESSION
    - CALL_EXPRESSION
    - SUBSCRIPT_EXPRESSION

  # Declaration with access specifier
  RESTRICTED_DECLARATION:
    - DECLARATION
    - ACCESS_SPECIFIER DECLARATION

  # Declaration access specifier
  ACCESS_SPECIFIER:
    - "public"
    - "private"

  # Base declaration
  # All declarations starts with an identifier with is
  # used to determine which type of declaration should be
  # parsed.
  # This allows the parser extensions
  DECLARATION:
    #- [ IDENTIFIER, __UNKNOWN__ ]

  # Statements
  # As declarations new statements can be added to the parser.
  # All statements begins with identifier and parser can decide
  # with statements should parse according to this identifier.
  # There are some exceptions:
  #  - compound: starts with "{"
  #  - declaration: identifier is declaration identifier
  #    so when is not known, parser should try declarations.
  #  - expression: unknown identifier (probably variable/constant name)
  #    or something other.
  STATEMENT:
    - EXPRESSION_STATEMENT
    - DECLARATION_STATEMENT
    - COMPOUND_STATEMENT
    #- [ IDENTIFIER, __UNKNOWN__ ]

  # List of statements
  STATEMENT_LIST:
    - STATEMENT
    - [ STATEMENT_LIST, STATEMENT ]

  # Statement for expression
  EXPRESSION_STATEMENT:
    - ";"
    - [ EXPRESSION, ";" ]

  # Statement for declaration.
  DECLARATION_STATEMENT:
    - DECLARATION

  # Compound/block statement.
  COMPOUND_STATEMENT:
    - [ "{", "}" ]
    - [ "{", STATEMENT_LIST, "}" ]

  # List of declarations.
  DECLARATION_LIST:
    - DECLARATION
    - [ DECLARATION_LIST, DECLARATION ]

  MODULE_NAME:
    - IDENTIFIER
    - [ MODULE_NAME, ".", IDENTIFIER ]

  USE_STATEMENT:
    - [ "use", MODULE_NAME, ";" ]

  # List of module usages
  USE_STATEMENTS:
    - USE_STATEMENT
    - [ USE_STATEMENTS, USE_STATEMENT ]

  # Source unit - entry point
  SOURCE:
    - USE_STATEMENTS
    - DECLARATION_LIST
